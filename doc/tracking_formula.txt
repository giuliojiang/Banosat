Truth formula example

    (p v q) (a v b)
    unsat: 0, 1

    - suppose we assign p = true, without running BCP

    (p v q) (a v ¬b)
     T
    unsat: 0, 1

    - suppose we assign q = true, without running BCP

    (p v q) (a v ¬b)
     T   T
    unsat: 1

    - suppose we assign a = true, b = false
    (p v q) (a v ¬b)
     T   T   T    T
    unsat: none
    Formula is now T

Falsity formula example

    (p v q) (a v b)
    unsat: 0, 1
    conflicting: none

    - suppose we assign p = false, without running BCP

    (p v q) (a v ¬b)
     F
    unsat: 0, 1
    conflicting: none

    - suppose we assign q = false (would not happen due to BCP but let's just suppose that because of some other clause or decision we assign that)

    (p v q) (a v ¬b)
     F   F
    unsat: 0, 1
    conflicting: 0
    Formula is now F

    - suppose we un-assign q (backtrack)

    variable q {
        participating clauses: [0]
    }

    so go in clause 0 -> (p v q)
    clause 0 {
        participating_unsat: pointer to the entry in unsat : linkedlist_node_t*
        participating_conflicting: pointer to the entry in conflicting : linkedlist_node_t*
    }

    undo assignment q
    
    if participating_conflicting is not NULL: remove that node from conflicting list

    if participating_unsat is NULL, add this clause to unsat list

Function: is True (formula)

    If conflicting list is not empty -> F
    If unsat list is empty -> T
    Otherwise -> Unknown
    
Assign variable
    
    void context_assign_variable_values_to_the_argument_of_this_function
    1 get the variable_t from the map
    2 assign the value to the variable
    3 get the participating clauses of the variable
    4 for each of the participating clauses,
        if eval(clause) == T     --> remove that clause from context->unsat
        if eval(clause) == UNDEF --> do nothing
        if eval(clause) == F     --> add that clause to context->conflicting
